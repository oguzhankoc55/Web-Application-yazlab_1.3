from django.contrib import admin

# Register your models here.
from django.apps import AppConfig


class AccountsConfig(AppConfig):
    name = 'accounts'
from django import forms
from django.contrib.auth import authenticate
from django.contrib.auth.models import User


class LoginForm(forms.Form):
    username = forms.CharField(max_length=100, label='Kullanıcı Adı')
    password = forms.CharField(max_length=100, label='Parola', widget=forms.PasswordInput)

    def clean(self):
        username = self.cleaned_data.get('username')
        password = self.cleaned_data.get('password')
        if username and password:
            user = authenticate(username=username, password=password)
            if not user:
                raise forms.ValidationError("Kullanıcı adını veya şifreyi yanlış girdiniz!")
        return super(LoginForm, self).clean()


class RegisterForm(forms.ModelForm):
    username = forms.CharField(max_length=100, label='Kullanıcı Adı')
    password1 = forms.CharField(max_length=100, label='Parola', widget=forms.PasswordInput)
    password2 = forms.CharField(max_length=100, label='Parola Doğrulama', widget=forms.PasswordInput)

    class Meta:
        model = User
        fields = [
            'username',
            'password1',
            'password2',
        ]

    def clean_password2(self):
        password1 = self.cleaned_data.get("password1")
        password2 = self.cleaned_data.get("password2")
        if password1 and password2 and password1 != password2:
            raise forms.ValidationError("Şifreler eşleşmiyor!")
        return password2
from django.db import models

# Create your models here.
from django.test import TestCase

# Create your tests here.
from django.conf.urls import url
from .views import *

app_name = "accounts"

urlpatterns = [

    url(r'^login/$', login_view, name="login"),

    url(r'^register/$', register_view, name="register"),

    url(r'^logout/$', logout_view, name="logout"),

]
from django.shortcuts import render, redirect
from .forms import LoginForm, RegisterForm
from django.contrib.auth import authenticate, login, logout


def login_view(request):
    form = LoginForm(request.POST or None)
    if form.is_valid():
        username = form.cleaned_data.get('username')
        password = form.cleaned_data.get('password')
        user = authenticate(username=username, password=password)
        login(request, user)

        return redirect('proje/index')

    return render(request, "accounts/form.html", {"form": form, 'title': 'Giriş Yap'})


def register_view(request):
    form = RegisterForm(request.POST or None)
    if form.is_valid():
        user = form.save(commit=False)
        password = form.cleaned_data.get('password1')
        user.set_password(password)
        # user.is_staff = user.is_superuser = True
        user.save()
        new_user = authenticate(username=user.username, password=password)
        login(request, new_user)
        return redirect('home')

    return render(request, "accounts/form.html", {"form": form, 'title': 'Üye Ol'})


def logout_view(request):
    logout(request)
    return redirect('home')
"""
Django settings for blog project.

Generated by 'django-admin startproject' using Django 1.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# print(BASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '79$g*#82qs_rl%3vmdand$g6#n%u9#w6c6$(-np%p@p3a2rhu!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # Django Uygulamaları
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Kendi Uygulamarım
    'proje',
    # 3. Parti Uygulamalar
    'crispy_forms',
    'django_cleanup',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'blog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
# print(os.path.join(BASE_DIR, 'db.sqlite3'))

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-US'

TIME_ZONE = 'Europe/Istanbul'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
# STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


CRISPY_TEMPLATE_PACK = 'bootstrap3'


from django.conf.urls import url, include
from django.contrib import admin
from accounts.views import login_view
from django.conf.urls.static import static
from django.conf import settings


urlpatterns = [

    url(r'^$', login_view, name='home'),

    url(r'^proje/', include('proje.urls')),

    url(r'^accounts/', include('accounts.urls')),

    url(r'^admin/', admin.site.urls),
]

urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
"""
WSGI config for blog project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "blog.settings")

application = get_wsgi_application()

# Register your models here.
from django.contrib import admin
from .models import Proje # veya from post.models import Post
#from .models import  Proje 
"""

class ProjeAdmin(admin.ModelAdmin):
    list_display = ['proje_baslıgı', 'isim', 'donem']
    list_display_links = ['isim']
    list_filter = ['isim']
    search_fields = ['proje_baslıgı', 'isim']
    list_editable = ['proje_baslıgı']

    class Meta:
        model = Proje

 
"""


admin.site.register(Proje)

from django.apps import AppConfig


class ProjeConfig(AppConfig):
    name = 'proje'
from django import forms
from .models import Proje


class ProjeForm(forms.ModelForm):
    class Meta:
        model = Proje
        fields = [
            'pdf',
        ]
from django.db import models
from django.urls import reverse


class Proje(models.Model):
    author = models.ForeignKey('auth.User', on_delete=models.CASCADE,verbose_name="yazar")
    isim = models.TextField()
    soy_isim = models.TextField()
    ogrenci_no = models.TextField()
    ogrenim_tur = models.TextField()
    ders_adi = models.TextField()
    proje_ozeti = models.TextField()
    proje_teslim_tarih = models.TextField()
    donem = models.TextField()
    proje_baslıgı = models.TextField()
    anahtar_kelimeler = models.TextField()
    danisman_bilgileri = models.TextField()
    juri_bilgileri = models.TextField()
    pdf = models.FileField(null=False, blank=True)

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        return reverse('proje:index')


    

    def save(self, *args, **kwargs):
        #self.slug = self.get_unique_slug()
        return super(Proje, self).save(*args, **kwargs)


from django.test import TestCase

# Create your tests here.
from django.conf.urls import url
from .views import *

app_name = "proje"

urlpatterns = [

    url(r'^index/$', proje_index, name="index"),
    
    url(r'^create/$', proje_create, name='create'),


]
from django.shortcuts import render, HttpResponse, get_object_or_404, HttpResponseRedirect, redirect, Http404
from .models import Proje
from .forms import ProjeForm
from django.contrib import messages
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.db.models import Q
from PdfDonusturucu import donustur



def proje_index(request):
    if request.user.id==1:
        proje_list = Proje.objects.all()
    else:
        proje_list = Proje.objects.filter(author_id=request.user.id)

    query = request.GET.get('q')
    if query:
      
            proje_list = proje_list.filter(
            Q(isim__icontains=query) |
            Q(ders_adi__icontains=query)|
            Q(proje_baslıgı__icontains=query) |
            Q(anahtar_kelimeler__icontains=query) |
            Q(donem__icontains=query) 

        ).distinct()
        

    paginator = Paginator(proje_list, 20)  # Show 5 contacts per page

    page = request.GET.get('page')
    try:
        projes = paginator.page(page)
    except PageNotAnInteger:
        # If page is not an integer, deliver first page.
        projes = paginator.page(1)
    except EmptyPage:
        # If page is out of range (e.g. 9999), deliver last page of results.
        projes = paginator.page(paginator.num_pages)
    
    return render(request, "proje/index.html", {'projes': projes})




def proje_create(request):
    
    if not request.user.is_authenticated:
        # Eğer kullanıcı giriş yapmamış ise hata sayfası gönder
        return Http404()

    form = ProjeForm(request.POST or None, request.FILES or None)
    if form.is_valid():
        
        proje = form.save(commit=False)
        proje.user = request.user
        proje.author_id=request.user.id
        proje.save()
        list=donustur(proje.pdf.path)
        proje.isim=list[0]
        proje.soy_isim=list[1]
        proje.ogrenci_no=list[2]
        proje.ogrenim_tur=list[3]
        proje.ders_adi=list[4]
        proje.proje_ozeti=list[5]
        proje.proje_teslim_tarih=list[6]
        proje.donem=list[7]
        proje.proje_baslıgı=list[8]
        proje.anahtar_kelimeler=list[9]
        proje.danisman_bilgileri=list[10]
        proje.juri_bilgileri=list[11]

        proje.save()
        #print( donustur(post.image.path))
        messages.success(request, "Başarılı bir şekilde oluşturdunuz.", extra_tags='mesaj-basarili')
        return HttpResponseRedirect(proje.get_absolute_url())

    context = {
        'form': form
    }

    return render(request, "proje/form.html", context)


{% extends 'base.html' %}
{% load crispy_forms_tags %}


{% block body %}

    <div class="container">
        <div class="row">
            <div class="col-md-6 col-md-offset-3">
                <h1>{{ title }}</h1>
                <form method="POST" enctype="multipart/form-data">
                    {% csrf_token %}
                    {{ form|crispy }}
                    <input class="btn btn-primary" type="submit" value="{{ title }}">
                </form>
            </div>
        </div>
    </div>

{% endblock %}
{% extends 'base.html' %}
{% load crispy_forms_tags %}


{% block body %}

    <div class="container">
        <div class="row">
            <div class="col-md-6 col-md-offset-3">
                <h1>Form</h1>
                <form method="POST" enctype="multipart/form-data">
                    {% csrf_token %}
                    {{ form|crispy  }}
                    <input class="btn btn-primary" type="submit" value="Post Oluştur">
                </form>
            </div>
        </div>
    </div>

{% endblock %}
{% extends 'base.html' %}

{% block body %}

{# /proje/{{ proje.isim }} #}

{#{% url 'detail' id=proje.isim %}#}

    <div class="container">
        {% for proje in projes %}
            <div class="row">
                <div class="col-md-6 col-md-offset-3">
                    <div class="thumbnail">

                        {% if proje.image %}
                            <img src="{{ proje.pdf.url }}" class="img-responsive" >
                        {% endif %}
                        <div class="caption">
                            <h3><a href="{{ proje.get_absolute_url }}">{{ proje.isim }}</a> <small></small></h3>
                            
                            <p>Ad:{{ proje.isim }}</p>
                            <p>Soyad:{{ proje.soy_isim }}</p>
                            <p>Öğrenci No:{{ proje.ogrenci_no }}</p>
                            <p>Öğrenim türü:{{ proje.ogrenim_tur }}</p>
                            <p>Ders Adı:{{ proje.ders_adi }}</p>
                            <p>Proje Özeti:{{ proje.proje_ozeti }}</p>
                            <p>Teslim Tarihi:{{ proje.proje_teslim_tarih }}</p>
                            <p>Dönem:{{ proje.donem }}</p>
                            <p>Proje Başlığı{{ proje.proje_baslıgı }}</p>
                            <p>Anahtar Kelimeler:{{ proje.anahtar_kelimeler }}</p>
                            <p>Danışman Bilgileri:{{ proje.danisman_bilgileri }}</p>
                            <p>Juri Bilgileri:{{ proje.juri_bilgileri }}</p>
                            <p>

                            
                              
                            </p>
                        </div>

                    </div>
                </div>
            </div>
        {% endfor %}

       

    </div>


{% endblock %}
{% load static %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" name="viewport" content="width=device-width, initial-scale=1">
    <title>{% block title %}Pdf-Converter{% endblock %}</title>
    <link rel="stylesheet" href="{% static 'css/bootstrap.min.css' %}">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
</head>
<body>

    {% include 'messages.html' %}

    {% include "header.html" %}

    {% block body %}

    {% endblock %}


    <script src="{% static "js/jquery.min.js" %}"></script>
    <script src="{% static "js/bootstrap.min.js" %}"></script>

</body>
</html>
<!-- Navbar Start -->
<nav class="navbar navbar-inverse navbar-fixed-top" role="banner">
    <div class="container">

        <div class="navbar-header">

            <!-- Telefon ekranları için menü butonu -->
            <button class="navbar-toggle" type="button" data-toggle="collapse" data-target=".navbar-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>

            <!-- İsim Soyisim veya Marka İsmi -->
            <a href="{% url 'home' %}" class="navbar-brand">Pdf Converter</a>
        </div>

        <nav class="collapse navbar-collapse" role="navigation">

            <!-- Arama Çubuğu -->
            <form class="navbar-form navbar-left" role="search" method="GET" action="">
                <div class="input-group">
                    <input class="form-control" type="text" name="q" placeholder="Search on posts" value="{{ request.GET.q }}" >
                    <span class="input-group-btn">
                        <input class="btn btn-default" type="submit" value="Ara">
                    </span>
                </div>
            </form>

            <!-- Temel Sayfalar -->
            <ul class="nav navbar-nav navbar-right">
                    {% if request.user.is_authenticated %}
                    <li><a href="{% url 'proje:create' %}" >Pdf Ekle</a></li>
                    <li><a href="{% url 'proje:index' %}">Anasayfa</a></li>
                    {% endif %}
                    
                    {% if not request.user.is_authenticated %}
                    <li><a href="{% url 'accounts:register' %}">Üye Ol</a></li>
                    <li><a href="{% url 'home' %}">Giriş</a></li>
                    
                    {% else %}
                    <li><a href="{% url 'accounts:logout' %}">Çıkış</a></li>
                    {% endif %}
                
            </ul>


        </nav>

    </div>
</nav>
{% if messages %}
    {% for message in messages %}
        <div class="alert alert-success alert-dismissible" role="alert">
          <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
          {{ message }}
        </div>
    {% endfor %}
{% endif %}
























